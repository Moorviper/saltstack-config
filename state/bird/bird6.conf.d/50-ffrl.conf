# THIS FILE IS CONTROLLED BY SALTSTACK
#
# Bird IPv6 configuration


{% if grains['id'] in pillar.ffrl %}

# BGP template for ffrl peerings
#
template bgp bgp_ffrl {
	table internet;
	local as ownas;
	route limit 10000;
#	check link yes;
	import keep filtered;
	import all;
#	import filter {
#		if (is_default()) then {
#			print "[ice] ASN ", bgp_path.last, " announces default route (via ", proto ,")";
#			reject;
#		}
#		if (is_self_net()) then {
#			print "[ice] ASN ", bgp_path.last, " announces our prefix (via ", proto ,")";
#			reject;
#		}
#		if (bgp_path.len > 16) then reject;
#		if (roa_check(icvpn_roa, net, bgp_path.last) = ROA_INVALID) then {
#			print "[ice] ROA check failed for ", net, " ASN ", bgp_path.last;
#			reject;
#		}
#		if (is_freifunk()) then accept; 
#		if (is_dn42()) then accept; 
#		reject;
#	};
	export none;
#	export filter {
#		if (is_self_net()) then accept;
#		if (is_freifunk()) then accept;
#		if (is_dn42()) then accept;
#		reject;
#	};
};


# Our peers
#
{% for peer, values in pillar.ffrl[grains['id']].peers.items() -%}

protocol bgp ffrl_{{ peer }} from bgp_ffrl {
	neighbor {{ pillar.ffrl[grains['id']].peers[peer].tun6.remote }} as 201701;
}

{%- endfor %}

{% endif %}

