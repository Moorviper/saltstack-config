# THIS FILE IS CONTROLLED BY SALTSTACK
#
# Bird IPv4 configuration



# Kernel protocol
#
# The kernel pseudo-protocol is used to performs synchronization of BIRD's 
# routing tables with the OS kernel tables.
#
protocol kernel {
	table private;			# sync from bird table private
	kernel table 100;		# sync to kernel table private
	persist;			# keep routes when restarting
	device routes;
	scan time 10;
	import none;			# do not import from kernel
	export filter {
		krt_prefsrc = ownip;
		accept;
	};
};

protocol kernel {
	table internet;			# sync from bird table inet
	kernel table 110;		# sync to kernel table inet
	persist;			# keep routes when restarting
	device routes;
	scan time 10;
	import none;			# do not import from kernel
	export filter {
		krt_prefsrc = ownip;
		accept;
	};
};

protocol kernel {
	table sink;			# sync from bird table sink
	kernel table 190;		# sync to kernel table sink
	persist;			# keep routes when restarting
	device routes;
	scan time 10;
	import none;			# do not import from kernel
	export filter {
		krt_prefsrc = ownip;
		accept;
	};
};



# Check for interface up/down events
#
# The Device protocol is not a real routing protocol. It doesn't generate any
# routes and it only serves as a module for getting information about network
# interfaces from the kernel.
#
protocol device {
        scan time 10;
};



# Announce networks bound to the bridge interface
#
# The kernel protocol will not announce any directly connected networks, as
# these routes are usually managed by OS itself. The direct protocol is used
# to announce networks connected to the fffd bridge interface.
#
protocol direct {
	table private;
	import all;
	interface "fffd.bat";
};

protocol direct {
	table internet;
	import all;
	interface "ffrl-dummy";
};

