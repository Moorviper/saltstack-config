# THIS FILE IS CONTROLLED BY SALTSTACK!
#
# IPv4 firewall - forwarding rules


# TABLE: FORWARD (POLICY DROP)
#
domain ip
table filter {
    chain FORWARD {
        policy DROP;

        # Allow established connections
        #
        mod conntrack ctstate (ESTABLISHED RELATED) ACCEPT;

        # allow routing on batman interface
        # i.e. if traffic comes from another gateway with a destination like dn42
        #
        interface fffd.bat outerface fffd.bat ACCEPT;

        # freifunk <-> vpn uplink
        #
        interface fffd.bat outerface eth0 saddr 10.185.0.0/16 daddr !10.185.0.0/16 ACCEPT;
        interface eth0 outerface fffd.bat saddr !10.185.0.0/16 daddr 10.185.0.0/16 ACCEPT;

  {% if pillar.peerings[grains['id']].type == "icvpn" -%}
        # freifunk <-> (icvpn)
        # this can be our own traffic or forwarded traffic for peerings
        #
        interface fffd.bat outerface icvpn daddr !10.185.0.0/16 ACCEPT;
        interface icvpn outerface fffd.bat saddr !10.185.0.0/16 ACCEPT;

  {% elif pillar.peerings[grains['id']].type == "ice" -%}
    {%- for peer1, values1 in pillar.peerings[grains['id']].peers.iteritems() if 'tun4' in values1 %}
        # freifunk <-> tun-{{ peer1 }}
        # this is traffic between peers and ourself
        #
        interface fffd.bat outerface tun-{{peer1}} ACCEPT;
        interface tun-{{peer1}} outerface fffd.bat ACCEPT;

      {%- for peer2, values2 in pillar.peerings[grains['id']].peers.iteritems() if peer2 != peer1 and 'tun4' in values2 %}
        # transit tun-{{ peer1 }} <-> tun-{{ peer2 }}
        # 
        interface tun-{{peer1}} outerface tun-{{peer2}} ACCEPT;
      {% endfor %}
    {% endfor -%}
  {% endif %}

        # LOG all DROPed traffic
        #
        LOG log-prefix "FORWARD[drop]: ";                            # LOG dropped traffic for debugging
    }
}

